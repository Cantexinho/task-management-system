@page "/"
@using Microsoft.AspNetCore.Authorization
@using TaskManagementSys.BlazorUI.Services
@attribute [Authorize]
@inject TaskService TaskService
@inject ProjectService ProjectService

<AuthorizeView>
    <Authorized>
        <div class="row mt-4">
            <div class="col-md-12 mb-4">
                <div class="card">
                    <div class="card-header">
                        <h4>Task Board</h4>
                    </div>
                    <div class="card-body">
                        @if (_isLoading)
                        {
                            <div class="text-center">
                                <div class="spinner-border" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="kanban-board">
                                <div class="row align-items-stretch">
                                    <div class="col">
                                        <KanbanColumn Tasks="_tasks" Status="Todo" Title="Todo" Color="bg-secondary" OnTaskStatusChanged="HandleTaskStatusChanged" />
                                    </div>
                                    <div class="col">
                                        <KanbanColumn Tasks="_tasks" Status="InProgress" Title="In Progress" Color="bg-primary" OnTaskStatusChanged="HandleTaskStatusChanged" />
                                    </div>
                                    <div class="col">
                                        <KanbanColumn Tasks="_tasks" Status="Review" Title="Review" Color="bg-info" OnTaskStatusChanged="HandleTaskStatusChanged" />
                                    </div>
                                    <div class="col">
                                        <KanbanColumn Tasks="_tasks" Status="Completed" Title="Completed" Color="bg-success" OnTaskStatusChanged="HandleTaskStatusChanged" />
                                    </div>
                                    <div class="col">
                                        <KanbanColumn Tasks="_tasks" Status="Canceled" Title="Canceled" Color="bg-danger" OnTaskStatusChanged="HandleTaskStatusChanged" />
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-6 mb-4">
                <MyTasks />
            </div>
            
            <div class="col-md-6">
                <MyProjects />
            </div>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    private List<TaskDto> _tasks = new();
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _isLoading = true;
            _tasks = await TaskService.GetUserTasksAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task HandleTaskStatusChanged((TaskDto Task, string NewStatus) update)
    {
        try
        {
            var (task, newStatus) = update;
            task.Status = newStatus;
            await TaskService.UpdateTaskAsync(task);
            
            // Refresh the task list to reflect the changes
            _tasks = await TaskService.GetUserTasksAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating task status: {ex.Message}");
            // Here you might want to add proper error handling, like showing a notification to the user
        }
    }
}
