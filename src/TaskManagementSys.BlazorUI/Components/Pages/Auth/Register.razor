@page "/register"
@layout TaskManagementSys.BlazorUI.Components.Layout.AuthLayout
@using TaskManagementSys.BlazorUI.Services
@using Microsoft.Extensions.Logging
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@inject ILogger<Register> Logger
@inject RegistrationService RegistrationService
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@implements IDisposable

<PageTitle>Register</PageTitle>

<link href="css/auth.css" rel="stylesheet" />

<div class="auth-page">
    <div class="auth-container">
        <div class="auth-content">
            <div class="text-center mb-4">
                <img src="images/logo.png" class="img-fluid rounded mb-3" style="max-width: 112px;" />
                <h4 class="fw-semibold">Task Management System</h4>
            </div>

            <div class="card shadow-sm border-0">
                <div class="card-body p-4">
                    <EditForm Model="@model" OnValidSubmit="@HandleValidSubmit" FormName="registerForm">
                        @if (!string.IsNullOrEmpty(errorMessage) && isServerError)
                        {
                            <div class="alert alert-danger mb-3">
                                @errorMessage
                            </div>
                        }

                        <div class="form-fields-container">
                            <div class="form-group mb-3">
                                <label for="email" class="form-label mb-2">Email address</label>
                                <InputText 
                                    id="email" 
                                    @bind-Value="model.Email" 
                                    class="@($"form-control {(!string.IsNullOrEmpty(emailError) ? "is-invalid" : "")}")"
                                    placeholder="Enter your email" />
                                @if (!string.IsNullOrEmpty(emailError))
                                {
                                    <div class="invalid-feedback">@emailError</div>
                                }
                            </div>

                            <div class="form-group mb-3">
                                <label for="password" class="form-label mb-2">Password</label>
                                <InputText 
                                    id="password" 
                                    type="password" 
                                    @bind-Value="model.Password" 
                                    class="@($"form-control {(!string.IsNullOrEmpty(passwordError) ? "is-invalid" : "")}")"
                                    placeholder="Enter your password" />
                                @if (!string.IsNullOrEmpty(passwordError))
                                {
                                    <div class="invalid-feedback">@passwordError</div>
                                }
                            </div>

                            <div class="form-group mb-4">
                                <label for="confirmPassword" class="form-label mb-2">Confirm Password</label>
                                <InputText 
                                    id="confirmPassword" 
                                    type="password" 
                                    @bind-Value="model.ConfirmPassword" 
                                    class="@($"form-control {(!string.IsNullOrEmpty(confirmPasswordError) ? "is-invalid" : "")}")"
                                    placeholder="Confirm your password" />
                                @if (!string.IsNullOrEmpty(confirmPasswordError))
                                {
                                    <div class="invalid-feedback">@confirmPasswordError</div>
                                }
                            </div>
                        </div>

                        <div class="form-buttons-container">
                            <div class="button-container mb-3">
                                <button type="submit" class="btn btn-primary py-2" disabled="@isLoading">
                                    @if (isLoading)
                                    {
                                        <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                                        <span>Creating account...</span>
                                    }
                                    else
                                    {
                                        <span>Sign up</span>
                                    }
                                </button>
                            </div>

                            <div class="divider-container">
                                <div class="divider-line"></div>
                                <div class="divider-text">or</div>
                            </div>

                            <div class="button-container">
                                <button type="button" 
                                        class="btn btn-outline-secondary py-2"
                                        @onclick="RegisterWithGoogle">
                                    <i class="bi bi-google me-2"></i> Sign up with Google
                                </button>
                            </div>

                            <div class="auth-link-container mt-4">
                                <a href="login" class="text-decoration-none">
                                    Already have an account? Log in here!
                                </a>
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private RegisterModel model = new();
    private string errorMessage = string.Empty;
    private bool isLoading = false;
    private string emailError = string.Empty;
    private string passwordError = string.Empty;
    private string confirmPasswordError = string.Empty;
    private bool isFormValid = false;
    private bool isServerError = false;

    private class RegisterModel
    {
        [Required]
        public string Email { get; set; } = string.Empty;
        [Required]
        public string Password { get; set; } = string.Empty;
        [Required]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
    
    private async Task HandleValidSubmit()
    {
        try 
        {
            Logger.LogInformation("Starting form validation");
            
            errorMessage = string.Empty;
            emailError = string.Empty;
            passwordError = string.Empty;
            confirmPasswordError = string.Empty;

            if (string.IsNullOrEmpty(model.Email))
            {
                emailError = "Email is required";
                return;
            }

            if (!System.Text.RegularExpressions.Regex.IsMatch(model.Email, @"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"))
            {
                emailError = "Please enter a valid email address";
                return;
            }

            if (string.IsNullOrEmpty(model.Password))
            {
                passwordError = "Password is required";
                return;
            }

            // Password validation
            if (model.Password.Length < 8 ||
                !model.Password.Any(char.IsUpper) ||
                !model.Password.Any(char.IsLower) ||
                !model.Password.Any(char.IsDigit) ||
                !model.Password.Any(ch => !char.IsLetterOrDigit(ch)))
            {
                passwordError = "Password must be at least 8 characters and include uppercase, lowercase, number, and special character";
                return;
            }

            if (string.IsNullOrEmpty(model.ConfirmPassword))
            {
                confirmPasswordError = "Please confirm your password";
                return;
            }

            if (model.Password != model.ConfirmPassword)
            {
                confirmPasswordError = "Passwords do not match";
                return;
            }

            isLoading = true;
            StateHasChanged();
            
            try 
            {
                var result = await RegistrationService.RegisterAsync(model.Email, model.Password, model.ConfirmPassword);
                
                if (result)
                {
                    var userSession = new UserSession
                    {
                        Email = model.Email,
                        Roles = new List<string> { "User" }
                    };
                    
                    var authProvider = (CustomAuthStateProvider)AuthStateProvider;
                    if (authProvider != null)
                    {
                        await authProvider.UpdateAuthenticationState(userSession);
                        Navigation.NavigateTo("/");
                    }
                    else
                    {
                        errorMessage = "Authentication provider not available.";
                        isServerError = true;
                        Logger.LogError("Authentication provider not available");
                    }
                }
                else
                {
                    errorMessage = "Registration failed. Please try again or use a different email.";
                    isServerError = true;
                    Logger.LogWarning("Registration failed");
                }
            }
            catch (Exception ex)
            {
                errorMessage = "An error occurred during registration. Please try again.";
                isServerError = true;
                Logger.LogError(ex, "Registration error");
            }
            finally
            {
                isLoading = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred during registration. Please try again.";
            Logger.LogError(ex, "Registration error");
        }
    }
    
    private void RegisterWithGoogle()
    {
        Navigation.NavigateTo($"{AuthService.BaseUrl}/api/Account/external-login?provider=Google", true);
    }

    public void Dispose()
    {
        // Cleanup if needed
    }
} 