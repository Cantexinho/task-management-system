@page "/register"
@using TaskManagementSys.BlazorUI.Services
@using Microsoft.Extensions.Logging
@using System.ComponentModel.DataAnnotations
@inject ILogger<Register> Logger
@inject RegistrationService RegistrationService
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@implements IDisposable

<PageTitle>Register</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h3 class="text-center">Register</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="@model" OnValidSubmit="@HandleValidSubmit" FormName="registerForm">
                        
                        <div class="form-group mb-3">
                            <label for="email">Email</label>
                            <InputText id="email" @bind-Value="model.Email" class="form-control" />
                            @if (!string.IsNullOrEmpty(emailError))
                            {
                                <div class="text-danger mt-1">@emailError</div>
                            }
                        </div>
                        
                        <div class="form-group mb-3">
                            <label for="password">Password</label>
                            <InputText id="password" @bind-Value="model.Password" type="password" class="form-control" />
                            @if (!string.IsNullOrEmpty(passwordError))
                            {
                                <div class="text-danger mt-1">@passwordError</div>
                            }
                            @if (!string.IsNullOrEmpty(model.Password))
                            {
                                <div class="mt-2">
                                    <div class="d-flex justify-content-between mb-1">
                                        <small>Password Strength</small>
                                        <small>@passwordStrengthText</small>
                                    </div>
                                    <div class="progress" style="height: 5px;">
                                        <div class="@passwordBarClass" role="progressbar" style="width: @passwordStrength%" aria-valuenow="@passwordStrength" aria-valuemin="0" aria-valuemax="100"></div>
                                    </div>
                                </div>
                            }
                        </div>
                        
                        <div class="form-group mb-3">
                            <label for="confirmPassword">Confirm Password</label>
                            <InputText id="confirmPassword" @bind-Value="model.ConfirmPassword" type="password" class="form-control" />
                            @if (!string.IsNullOrEmpty(confirmPasswordError))
                            {
                                <div class="text-danger mt-1">@confirmPasswordError</div>
                            }
                        </div>
                        
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger mt-3">
                                @errorMessage
                            </div>
                        }
                        
                        <div class="text-center">
                            <button type="submit" class="btn btn-primary" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <span> Loading...</span>
                                }
                                else
                                {
                                    <span>Register</span>
                                }
                            </button>
                        </div>
                        
                        <div class="text-center mt-3">
                            <div class="separator mb-3">Or register with</div>
                            <button type="button" class="btn btn-outline-danger" @onclick="RegisterWithGoogle">
                                <i class="bi bi-google"></i> Google
                            </button>
                        </div>
                    </EditForm>
                </div>
                <div class="card-footer text-center">
                    <span>Already have an account? </span>
                    <a href="login">Login here</a>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .separator {
        display: flex;
        align-items: center;
        text-align: center;
        color: #6c757d;
    }

    .separator::before,
    .separator::after {
        content: '';
        flex: 1;
        border-bottom: 1px solid #dee2e6;
    }

    .separator::before {
        margin-right: .25em;
    }

    .separator::after {
        margin-left: .25em;
    }
</style>

@code {
    private RegisterModel model = new();
    private string errorMessage = string.Empty;
    private bool isLoading = false;
    private int passwordStrength = 0;
    private string passwordStrengthText = "";
    private string passwordBarClass = "";
    
    private string emailError = string.Empty;
    private string passwordError = string.Empty;
    private string confirmPasswordError = string.Empty;
    private bool isFormValid = false;
    
    protected override void OnInitialized()
    {
        // Removed: editContext = new EditContext(model);
        // Removed: editContext.OnValidationStateChanged += (sender, e) => UpdateFormValidityState();
    }
    
    private void UpdateFormValidityState()
    {
        // Removed: isFormValid = RegistrationService.ValidateForm(
        //     model.Email, 
        //     model.Password, 
        //     model.ConfirmPassword,
        //     out emailError,
        //     out passwordError,
        //     out confirmPasswordError);
    }
    
    private void OnEmailInput()
    {
        // Removed: emailError = RegistrationService.ValidateEmail(model.Email);
        // Removed: UpdateFormValidityState();
        // Removed: StateHasChanged();
    }
    
    private void OnPasswordInput()
    {
        // Removed: passwordError = RegistrationService.ValidatePassword(model.Password);
        
        // Removed: var strengthInfo = RegistrationService.CheckPasswordStrength(model.Password);
        // Removed: passwordStrength = strengthInfo.strength;
        // Removed: passwordStrengthText = strengthInfo.text;
        // Removed: passwordBarClass = strengthInfo.cssClass;
        
        // Removed: confirmPasswordError = RegistrationService.ValidateConfirmPassword(model.Password, model.ConfirmPassword);
        // Removed: UpdateFormValidityState();
        // Removed: StateHasChanged();
    }
    
    private void OnConfirmPasswordInput()
    {
        // Removed: confirmPasswordError = RegistrationService.ValidateConfirmPassword(model.Password, model.ConfirmPassword);
        // Removed: UpdateFormValidityState();
        // Removed: StateHasChanged();
    }
    
    private class RegisterModel
    {
        [Required]
        public string Email { get; set; } = string.Empty;
        [Required]
        public string Password { get; set; } = string.Empty;
        [Required]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
    
    private async Task HandleValidSubmit()
    {
        try 
        {
            Logger.LogInformation("*****************Starting form validation*****************");
            Logger.LogInformation($"Form values - Email: '{model.Email}', Password length: {model.Password?.Length ?? 0}");

            errorMessage = string.Empty;
            emailError = string.Empty;
            passwordError = string.Empty;
            confirmPasswordError = string.Empty;

            emailError = RegistrationService.ValidateEmail(model.Email);
            passwordError = RegistrationService.ValidatePassword(model.Password);
            confirmPasswordError = RegistrationService.ValidateConfirmPassword(model.Password, model.ConfirmPassword);
            
            Logger.LogInformation($"Validation errors - Email: '{emailError}', Password: '{passwordError}', Confirm: '{confirmPasswordError}'");
            
            UpdateFormValidityState();
            StateHasChanged();
            
            Logger.LogInformation($"Form valid: {isFormValid}");
            
            if (!isFormValid)
            {
                errorMessage = RegistrationService.GetErrorMessage(
                    model.Email!,
                    model.Password!,
                    model.ConfirmPassword!,
                    emailError,
                    passwordError,
                    confirmPasswordError);
                Logger.LogWarning($"Form validation failed: {errorMessage}");
                return;
            }
             
            isLoading = true;
            StateHasChanged();
            
            var result = await RegistrationService.RegisterAsync(model.Email, model.Password, model.ConfirmPassword);
            
            if (result)
            {
                var userSession = new UserSession
                {
                    Email = model.Email,
                    Roles = new List<string> { "User" }
                };
                
                var authProvider = (CustomAuthStateProvider)AuthStateProvider;
                if (authProvider != null)
                {
                    await authProvider.UpdateAuthenticationState(userSession);
                    Navigation.NavigateTo("/");
                }
                else
                {
                    errorMessage = "Authentication provider not available.";
                    Logger.LogError("Authentication provider not available");
                }
            }
            else
            {
                errorMessage = "Registration failed. Please try again or use a different email.";
                Logger.LogWarning("Registration failed");
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred during registration. Please try again.";
            Logger.LogError(ex, "Registration error");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    private void RegisterWithGoogle()
    {
        Navigation.NavigateTo($"{AuthService.BaseUrl}/api/Account/external-login?provider=Google", true);
    }

    public void Dispose()
    {
        // No need to unsubscribe from EditContext events
    }
} 