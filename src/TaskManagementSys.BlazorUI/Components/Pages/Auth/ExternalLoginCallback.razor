@page "/external-login-callback"
@using Microsoft.AspNetCore.Components.Authorization
@using TaskManagementSys.BlazorUI.Services
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject AuthService AuthService
@inject IJSRuntime JSRuntime

<div class="container mt-5">
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }
    else
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3">Processing authentication...</p>
        </div>
    }
</div>

@code {
    private string errorMessage = string.Empty;
    
    [Parameter]
    [SupplyParameterFromQuery]
    public string? Token { get; set; }
    
    [Parameter]
    [SupplyParameterFromQuery]
    public string? Email { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        try {
            await JSRuntime.InvokeVoidAsync("console.log", "Current URL: " + Navigation.Uri);
            
            if (!string.IsNullOrEmpty(Email) && !string.IsNullOrEmpty(Token))
            {
                await JSRuntime.InvokeVoidAsync("console.log", "Email and Token found in URL");
                
                // Set the auth token first
                AuthService.SetAuthToken(Token);
                
                var userSession = new UserSession
                {
                    Email = Email,
                    Roles = new List<string> { "User" }  // Default role
                };
                
                await ((CustomAuthStateProvider)AuthStateProvider).UpdateAuthenticationState(userSession, Token);
                
                var userInfo = await AuthService.GetUserInfoAsync();
                if (userInfo != null)
                {
                    userSession.Roles = userInfo.Roles;
                    await ((CustomAuthStateProvider)AuthStateProvider).UpdateAuthenticationState(userSession, Token);
                }
                
                Navigation.NavigateTo("/");
                return;
            }
            
            errorMessage = "Authentication failed. Please try logging in again.";
            await Task.Delay(3000);
            Navigation.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
            await JSRuntime.InvokeVoidAsync("console.error", $"Error in external login callback: {ex.Message}");
        }
    }
} 