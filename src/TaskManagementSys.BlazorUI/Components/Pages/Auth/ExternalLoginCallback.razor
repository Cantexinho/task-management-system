@page "/external-login-callback"
@using Microsoft.AspNetCore.Components.Authorization
@using TaskManagementSys.BlazorUI.Services
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime

<PageTitle>Processing login...</PageTitle>

<div class="d-flex justify-content-center align-items-center" style="height: 100vh;">
    <div class="text-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-3">Processing your login...</p>
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger mt-3" role="alert">
                @errorMessage
            </div>
        }
    </div>
</div>

@code {
    private string errorMessage = string.Empty;
    
    [Parameter]
    [SupplyParameterFromQuery]
    public string? Token { get; set; }
    
    [Parameter]
    [SupplyParameterFromQuery]
    public string? Email { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        try {
            // Log the current URL for debugging
            await JSRuntime.InvokeVoidAsync("console.log", "Current URL: " + Navigation.Uri);
            
            // If we have email and token from query params, use those directly
            if (!string.IsNullOrEmpty(Email))
            {
                await JSRuntime.InvokeVoidAsync("console.log", "Email found in URL: " + Email);
                
                var userSession = new UserSession
                {
                    Email = Email,
                    Roles = new List<string> { "User" }
                };
                
                await ((CustomAuthStateProvider)AuthStateProvider).UpdateAuthenticationState(userSession);
                
                // Redirect to home page
                Navigation.NavigateTo("/");
                return;
            }
            
            // Otherwise, try to get user info from the API
            await JSRuntime.InvokeVoidAsync("console.log", "Trying to get user info from API...");
            var userInfo = await AuthService.GetUserInfoAsync();
            
            if (userInfo != null && !string.IsNullOrEmpty(userInfo.Email))
            {
                await JSRuntime.InvokeVoidAsync("console.log", "User info retrieved: " + userInfo.Email);
                
                var userSession = new UserSession
                {
                    Email = userInfo.Email,
                    Roles = userInfo.Roles ?? new List<string> { "User" }
                };
                
                await ((CustomAuthStateProvider)AuthStateProvider).UpdateAuthenticationState(userSession);
                
                // Redirect to home page
                Navigation.NavigateTo("/");
            }
            else
            {
                // Let's create a direct login back to our API
                await JSRuntime.InvokeVoidAsync("console.log", "Authentication failed - trying a different approach...");
                errorMessage = "Authentication process incomplete. Redirecting you back to login...";
                await Task.Delay(3000); // Give user time to read the message
                Navigation.NavigateTo("/login");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
            await JSRuntime.InvokeVoidAsync("console.error", $"Error in external login callback: {ex.Message}");
        }
    }
} 