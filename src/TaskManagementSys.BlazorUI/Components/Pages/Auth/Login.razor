@page "/login"
@using TaskManagementSys.BlazorUI.Services
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Login</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h3 class="text-center">Login</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="@model" OnValidSubmit="@HandleValidSubmit" FormName="loginForm">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        
                        <div class="form-group mb-3">
                            <label for="email">Email</label>
                            <InputText id="email" @bind-Value="model.Email" class="form-control" />
                            <ValidationMessage For="@(() => model.Email)" />
                        </div>
                        
                        <div class="form-group mb-3">
                            <label for="password">Password</label>
                            <InputText id="password" @bind-Value="model.Password" type="password" class="form-control" />
                            <ValidationMessage For="@(() => model.Password)" />
                        </div>
                        
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger mt-3">
                                @errorMessage
                            </div>
                        }
                        
                        <div class="text-center">
                            <button type="submit" class="btn btn-primary" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <span> Loading...</span>
                                }
                                else
                                {
                                    <span>Login</span>
                                }
                            </button>
                        </div>
                        
                        <div class="text-center mt-3">
                            <div class="separator mb-3">Or login with</div>
                            <button type="button" class="btn btn-outline-danger" @onclick="LoginWithGoogle">
                                <i class="bi bi-google"></i> Google
                            </button>
                        </div>
                    </EditForm>
                </div>
                <div class="card-footer text-center">
                    <span>Don't have an account? </span>
                    <a href="register">Register here</a>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .separator {
        display: flex;
        align-items: center;
        text-align: center;
        color: #6c757d;
    }

    .separator::before,
    .separator::after {
        content: '';
        flex: 1;
        border-bottom: 1px solid #dee2e6;
    }

    .separator::before {
        margin-right: .25em;
    }

    .separator::after {
        margin-left: .25em;
    }
</style>

@code {
    private LoginModel model = new();
    private string errorMessage = string.Empty;
    private bool isLoading = false;
    
    private class LoginModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        [RegularExpression(@"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$", 
            ErrorMessage = "Please enter a valid email address")]
        public string Email { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = string.Empty;
    }
    
    private async Task HandleValidSubmit()
    {
        isLoading = true;
        errorMessage = string.Empty;
        
        try
        {
            var result = await AuthService.LoginAsync(model.Email, model.Password);
            
            if (result)
            {
                // Create user session and update auth state
                var userSession = new UserSession
                {
                    Email = model.Email,
                    Roles = new List<string> { "User" } // Default role, should come from API
                };
                
                await ((CustomAuthStateProvider)AuthStateProvider).UpdateAuthenticationState(userSession);
                
                Navigation.NavigateTo("/");
            }
            else
            {
                errorMessage = "Invalid login attempt. Please check your email and password.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private void LoginWithGoogle()
    {
        // Redirect to the Google auth endpoint
        Navigation.NavigateTo($"{AuthService.BaseUrl}/api/Account/external-login?provider=Google", true);
    }
} 