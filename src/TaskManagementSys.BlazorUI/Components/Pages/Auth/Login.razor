@inherits Microsoft.AspNetCore.Components.ComponentBase
@page "/login"
@layout TaskManagementSys.BlazorUI.Components.Layout.AuthLayout
@using TaskManagementSys.BlazorUI.Services
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime

<PageTitle>Login</PageTitle>

<link href="css/auth.css" rel="stylesheet" />

<div class="auth-page">
    <div class="auth-container">
        <div class="auth-content">
            <div class="text-center mb-4">
                <img src="images/logo.png" class="img-fluid rounded mb-3" style="max-width: 112px;" />
                <h4 class="fw-semibold">Task Management System</h4>
            </div>

            <div class="card shadow-sm border-0">
                <div class="card-body p-4">
                    <EditForm Model="@model" OnValidSubmit="@HandleValidSubmit" FormName="loginForm">
                        <div class="form-fields-container">
                            <div class="form-group mb-3">
                                <label for="email" class="form-label mb-2">Email address</label>
                                <InputText 
                                    id="email" 
                                    @bind-Value="model.Email" 
                                    class="@($"form-control {(!string.IsNullOrEmpty(emailError) ? "is-invalid" : "")}")"
                                    placeholder="Enter your email"
                                    @oninput="ValidateEmail" />
                                @if (!string.IsNullOrEmpty(emailError))
                                {
                                    <div class="invalid-feedback">@emailError</div>
                                }
                            </div>

                            <div class="form-group mb-4">
                                <label for="password" class="form-label mb-2">Password</label>
                                <InputText 
                                    id="password" 
                                    type="password" 
                                    @bind-Value="model.Password" 
                                    class="@($"form-control {(!string.IsNullOrEmpty(passwordError) ? "is-invalid" : "")}")"
                                    placeholder="Enter your password"
                                    @oninput="ValidatePassword" />
                                @if (!string.IsNullOrEmpty(passwordError))
                                {
                                    <div class="invalid-feedback">@passwordError</div>
                                }
                            </div>
                        </div>

                        <div class="form-buttons-container">
                            <div class="button-container mb-3">
                                <button type="submit" class="btn btn-primary py-2" disabled="@isLoading">
                                    @if (isLoading)
                                    {
                                        <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                                        <span>Logging in...</span>
                                    }
                                    else
                                    {
                                        <span>Log in</span>
                                    }
                                </button>
                            </div>

                            <div class="divider-container">
                                <div class="divider-line"></div>
                                <div class="divider-text">or</div>
                            </div>

                            <div class="button-container">
                                <button type="button" 
                                        class="btn btn-outline-secondary py-2"
                                        @onclick="LoginWithGoogle">
                                    <i class="bi bi-google me-2"></i> Sign in with Google
                                </button>
                            </div>

                            <div class="auth-link-container mt-4">
                                <a href="register" class="text-decoration-none">
                                    Don't have an account? Sign up here!
                                </a>
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel model = new();
    private EditContext editContext = null!;
    private string errorMessage = string.Empty;
    private bool isLoading = false;
    
    // Field-specific validation messages
    private string emailError = string.Empty;
    private string passwordError = string.Empty;
    private bool isFormValid = false;
    
    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(model);
        editContext.OnValidationStateChanged += (sender, e) => UpdateFormValidity();
        
        await JSRuntime.InvokeVoidAsync("eval", "document.title = 'Login'");
    }
    
    private void UpdateFormValidity()
    {
        isFormValid = string.IsNullOrEmpty(emailError) && 
                      string.IsNullOrEmpty(passwordError) &&
                      !string.IsNullOrEmpty(model.Email) &&
                      !string.IsNullOrEmpty(model.Password);
    }
    
    private void ValidateEmail()
    {
        emailError = string.Empty;
        
        if (string.IsNullOrEmpty(model.Email))
        {
            emailError = "Email is required";
        }
        else if (!Regex.IsMatch(model.Email, @"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"))
        {
            emailError = "Please enter a valid email address";
        }
        
        UpdateFormValidity();
    }
    
    private void ValidatePassword()
    {
        passwordError = string.Empty;
        
        if (string.IsNullOrEmpty(model.Password))
        {
            passwordError = "Password is required";
        }
        
        UpdateFormValidity();
    }
    
    private class LoginModel
    {
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }
    
    private async Task HandleValidSubmit()
    {
        ValidateEmail();
        ValidatePassword();
        
        if (!isFormValid)
        {
            if (string.IsNullOrEmpty(model.Email))
            {
                errorMessage = "Email is required.";
                return;
            }
            
            if (string.IsNullOrEmpty(model.Password))
            {
                errorMessage = "Password is required.";
                return;
            }
            
            if (!string.IsNullOrEmpty(emailError))
            {
                errorMessage = "Please enter a valid email address.";
                return;
            }
            
            errorMessage = "Please fill in all required fields correctly.";
            return;
        }
        
        errorMessage = string.Empty;
        isLoading = true;
        
        try
        {
            var result = await AuthService.LoginAsync(model.Email, model.Password);
            
            if (result)
            {
                var userSession = new UserSession
                {
                    Email = model.Email,
                    Roles = new List<string> { "User" }
                };
                
                await ((CustomAuthStateProvider)AuthStateProvider).UpdateAuthenticationState(userSession);
                
                Navigation.NavigateTo("/");
            }
            else
            {
                errorMessage = "Invalid login attempt. Please check your email and password.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private void LoginWithGoogle()
    {
        // Redirect to the Google auth endpoint
        Navigation.NavigateTo($"{AuthService.BaseUrl}/api/Account/external-login?provider=Google", true);
    }
} 