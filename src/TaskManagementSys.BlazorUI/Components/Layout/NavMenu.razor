@using TaskManagementSys.BlazorUI.Services
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider

<nav class="navbar navbar-expand navbar-dark w-100">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Task Management</a>
        <div class="collapse navbar-collapse">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                <li class="nav-item">
                    <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                        <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
                    </NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="projects">
                        <span class="bi bi-kanban-fill" aria-hidden="true"></span> Projects
                    </NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="tasks">
                        <span class="bi bi-list-task" aria-hidden="true"></span> Tasks
                    </NavLink>
                </li>
            </ul>
            <div class="d-flex">
                <span class="text-light small me-3 my-auto">@username</span>
                <button class="btn btn-link nav-link" @onclick="HandleLogout">
                    <span class="bi bi-box-arrow-right" aria-hidden="true"></span> Logout
                </button>
            </div>
        </div>
    </div>
</nav>

@code {
    private string? username;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        username = authState.User.Identity?.Name;
    }

    private async Task HandleLogout()
    {
        try
        {
            await AuthService.LogoutAsync();
            await ((CustomAuthStateProvider)AuthStateProvider).UpdateAuthenticationState(null);
            Navigation.NavigateTo("/login");
        }
        catch
        {
            // Even if API call fails, clear local session and redirect
            await ((CustomAuthStateProvider)AuthStateProvider).UpdateAuthenticationState(null);
            Navigation.NavigateTo("/login");
        }
    }
}

