@using TaskManagementSys.BlazorUI.Services
@using TaskManagementSys.Core.Entities
@using System.ComponentModel.DataAnnotations
@inject TaskService TaskService
@inject ProjectService ProjectService

<div class="modal fade @(_isVisible ? "show" : "")" id="taskModal" tabindex="-1" aria-labelledby="taskModalLabel" 
     style="display: @(_isVisible ? "block" : "none");" aria-modal="@_isVisible" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="taskModalLabel">@(_isEditing ? "Edit Task" : "Create New Task")</h5>
                <button type="button" class="btn-close" aria-label="Close" @onclick="CloseModal"></button>
            </div>
            <div class="modal-body">
                @if (!string.IsNullOrEmpty(_successMessage))
                {
                    <div class="alert alert-success alert-dismissible fade show" role="alert">
                        @_successMessage
                        <button type="button" class="btn-close" @onclick="() => _successMessage = null" aria-label="Close"></button>
                    </div>
                }
                
                @if (!string.IsNullOrEmpty(_errorMessage))
                {
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        @_errorMessage
                        <button type="button" class="btn-close" @onclick="() => _errorMessage = null" aria-label="Close"></button>
                    </div>
                }
                
                <EditForm Model="@_createTaskDto" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />

                    <div class="mb-3">
                        <label for="title" class="form-label">Title</label>
                        <InputText id="title" class="@GetInputClass("title")" @bind-Value="_createTaskDto.Title" />
                        <ValidationMessage For="@(() => _createTaskDto.Title)" />
                        @if (HasError("title"))
                        {
                            <div class="invalid-feedback">
                                @foreach (var error in GetErrors("title"))
                                {
                                    <div>@error</div>
                                }
                            </div>
                        }
                    </div>

                    <div class="mb-3">
                        <label for="description" class="form-label">Description</label>
                        <InputTextArea id="description" class="@GetInputClass("description")" @bind-Value="_createTaskDto.Description" />
                        <ValidationMessage For="@(() => _createTaskDto.Description)" />
                        @if (HasError("description"))
                        {
                            <div class="invalid-feedback">
                                @foreach (var error in GetErrors("description"))
                                {
                                    <div>@error</div>
                                }
                            </div>
                        }
                    </div>

                    <div class="mb-3">
                        <label for="dueDate" class="form-label">Due Date</label>
                        <InputDate id="dueDate" class="@GetInputClass("dueDate")" @bind-Value="_createTaskDto.DueDate" />
                        <ValidationMessage For="@(() => _createTaskDto.DueDate)" />
                        @if (HasError("dueDate"))
                        {
                            <div class="invalid-feedback">
                                @foreach (var error in GetErrors("dueDate"))
                                {
                                    <div>@error</div>
                                }
                            </div>
                        }
                    </div>

                    <div class="mb-3">
                        <label for="priority" class="form-label">Priority</label>
                        <InputSelect id="priority" class="@GetSelectClass("priority")" @bind-Value="_createTaskDto.Priority">
                            <option value="@TaskPriority.Low">Low</option>
                            <option value="@TaskPriority.Medium">Medium</option>
                            <option value="@TaskPriority.High">High</option>
                            <option value="@TaskPriority.Urgent">Urgent</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => _createTaskDto.Priority)" />
                        @if (HasError("priority"))
                        {
                            <div class="invalid-feedback">
                                @foreach (var error in GetErrors("priority"))
                                {
                                    <div>@error</div>
                                }
                            </div>
                        }
                    </div>

                    <div class="mb-3">
                        <label for="status" class="form-label">Status</label>
                        <InputSelect id="status" class="@GetSelectClass("status")" @bind-Value="_createTaskDto.Status">
                            <option value="@TaskItemStatus.Todo">Todo</option>
                            <option value="@TaskItemStatus.InProgress">In Progress</option>
                            <option value="@TaskItemStatus.Review">Review</option>
                            <option value="@TaskItemStatus.Completed">Completed</option>
                            <option value="@TaskItemStatus.Canceled">Canceled</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => _createTaskDto.Status)" />
                        @if (HasError("status"))
                        {
                            <div class="invalid-feedback">
                                @foreach (var error in GetErrors("status"))
                                {
                                    <div>@error</div>
                                }
                            </div>
                        }
                    </div>

                    <div class="mb-3">
                        <label for="project" class="form-label">Project (Optional)</label>
                        <InputSelect id="project" class="@GetSelectClass("projectId")" @bind-Value="_createTaskDto.ProjectId">
                            <option value="">-- None --</option>
                            @foreach (var project in _projects)
                            {
                                <option value="@project.Id">@project.Name</option>
                            }
                        </InputSelect>
                        @if (HasError("projectId"))
                        {
                            <div class="invalid-feedback">
                                @foreach (var error in GetErrors("projectId"))
                                {
                                    <div>@error</div>
                                }
                            </div>
                        }
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                        @if (_isEditing && _taskBeingEdited != null)
                        {
                            <button type="button" class="btn btn-danger me-auto" @onclick="HandleDelete" disabled="@_isSubmitting">
                                @if (_isSubmitting)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <span> Deleting...</span>
                                }
                                else
                                {
                                    <span>Delete Task</span>
                                }
                            </button>
                        }
                        <button type="submit" class="btn btn-primary" disabled="@_isSubmitting">
                            @if (_isSubmitting)
                            {
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span> Saving...</span>
                            }
                            else
                            {
                                <span>@(_isEditing ? "Update Task" : "Create Task")</span>
                            }
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@if (_isVisible)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    private bool _isVisible = false;
    private bool _isSubmitting = false;
    private bool _isEditing = false;
    private string? _errorMessage;
    private string? _successMessage;
    private Dictionary<string, List<string>> _validationErrors = new();
    private List<ProjectDto> _projects = new();
    private CreateTaskDto _createTaskDto = new();
    private TaskDto? _taskBeingEdited;
    
    [Parameter]
    public EventCallback<bool> OnClose { get; set; }
    
    [Parameter]
    public EventCallback<TaskDto> OnTaskCreated { get; set; }
    
    [Parameter]
    public EventCallback<TaskDto> OnTaskDeleted { get; set; }
    
    private bool HasError(string fieldName)
    {
        return _validationErrors.ContainsKey(fieldName.ToLower()) || 
               _validationErrors.ContainsKey(char.ToUpper(fieldName[0]) + fieldName.Substring(1));
    }
    
    private string GetInputClass(string fieldName)
    {
        return HasError(fieldName) ? "form-control is-invalid" : "form-control";
    }
    
    private string GetSelectClass(string fieldName)
    {
        return HasError(fieldName) ? "form-select is-invalid" : "form-select";
    }
    
    private List<string> GetErrors(string fieldName)
    {
        var lowerField = fieldName.ToLower();
        if (_validationErrors.ContainsKey(lowerField))
        {
            return _validationErrors[lowerField];
        }
        
        var pascalCase = char.ToUpper(fieldName[0]) + fieldName.Substring(1);
        if (_validationErrors.ContainsKey(pascalCase))
        {
            return _validationErrors[pascalCase];
        }
        
        return new List<string>();
    }
    
    public async Task ShowModal()
    {
        _createTaskDto = new CreateTaskDto 
        { 
            Status = TaskItemStatus.Todo,
            Priority = TaskPriority.Medium,
            CategoryIds = new List<int>(),
            AssigneeIds = new List<string>()
        };
        _errorMessage = null;
        _successMessage = null;
        _validationErrors.Clear();
        _isVisible = true;
        _isSubmitting = false;
        _isEditing = false;
        _taskBeingEdited = null;
        await LoadProjects();
        StateHasChanged();
    }

    public async Task ShowEditModal(TaskDto task)
    {
        _taskBeingEdited = task;
        _createTaskDto = new CreateTaskDto 
        { 
            Title = task.Title,
            Description = task.Description,
            DueDate = task.DueDate,
            Priority = Enum.Parse<TaskPriority>(task.Priority),
            Status = Enum.Parse<TaskItemStatus>(task.Status),
            ProjectId = task.ProjectId,
            CategoryIds = new List<int>(),
            AssigneeIds = new List<string>()
        };
        _errorMessage = null;
        _successMessage = null;
        _validationErrors.Clear();
        _isVisible = true;
        _isSubmitting = false;
        _isEditing = true;
        await LoadProjects();
        StateHasChanged();
    }
    
    private async Task LoadProjects()
    {
        _projects = await ProjectService.GetUserProjectsAsync();
    }
    
    private async Task CloseModal()
    {
        _isVisible = false;
        await OnClose.InvokeAsync(false);
    }
    
    private async Task HandleValidSubmit()
    {
        try
        {
            _isSubmitting = true;
            _errorMessage = null;
            _successMessage = null;
            _validationErrors.Clear();
            StateHasChanged();

            if (_isEditing && _taskBeingEdited != null)
            {
                // Update existing task
                _taskBeingEdited.Title = _createTaskDto.Title;
                _taskBeingEdited.Description = _createTaskDto.Description;
                _taskBeingEdited.DueDate = _createTaskDto.DueDate;
                _taskBeingEdited.Priority = _createTaskDto.Priority.ToString();
                _taskBeingEdited.Status = _createTaskDto.Status.ToString();
                _taskBeingEdited.ProjectId = _createTaskDto.ProjectId;

                var success = await TaskService.UpdateTaskAsync(_taskBeingEdited);
                
                if (success)
                {
                    _successMessage = $"Task '{_taskBeingEdited.Title}' updated successfully!";
                    await OnTaskCreated.InvokeAsync(_taskBeingEdited);
                    
                    // Close after a short delay to allow the user to see the success message
                    await Task.Delay(1500);
                    await CloseModal();
                }
                else
                {
                    _errorMessage = "Failed to update task. Please try again.";
                }
            }
            else
            {
                // Create new task
                var response = await TaskService.CreateTaskAsync(_createTaskDto);
                var (taskResult, errors) = response;
                
                _validationErrors = errors;
                
                if (errors.Count > 0)
                {
                    if (errors.ContainsKey("") && errors[""].Count > 0)
                    {
                        _errorMessage = string.Join(", ", errors[""]);
                    }
                    else
                    {
                        _errorMessage = "Please correct the validation errors.";
                    }
                    return;
                }
                
                if (taskResult != null)
                {
                    _successMessage = $"Task '{taskResult.Title}' created successfully!";
                    await OnTaskCreated.InvokeAsync(taskResult);
                    
                    // Close after a short delay to allow the user to see the success message
                    await Task.Delay(1500);
                    await CloseModal();
                }
                else
                {
                    _errorMessage = "Failed to create task. Please try again.";
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving task: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
            if (!_validationErrors.ContainsKey(""))
            {
                _validationErrors[""] = new List<string>();
            }
            _validationErrors[""].Add($"Error: {ex.Message}");
            _errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            _isSubmitting = false;
            StateHasChanged();
        }
    }

    private async Task HandleDelete()
    {
        if (_taskBeingEdited == null) return;
        
        try
        {
            _isSubmitting = true;
            _errorMessage = null;
            _successMessage = null;
            StateHasChanged();

            var (success, errorMessage) = await TaskService.DeleteTaskAsync(_taskBeingEdited.Id);
            
            if (success)
            {
                _successMessage = $"Task '{_taskBeingEdited.Title}' deleted successfully!";
                await OnTaskDeleted.InvokeAsync(_taskBeingEdited);
                
                // Close after a short delay to allow the user to see the success message
                await Task.Delay(1500);
                await CloseModal();
            }
            else
            {
                _errorMessage = errorMessage ?? "Failed to delete task. Please try again.";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting task: {ex.Message}");
            _errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            _isSubmitting = false;
            StateHasChanged();
        }
    }
} 